---
interface Props {
    id: string;
    type: 'post' | 'question';
    title: string;
    content: string;
    media: any[];
    category?: string;
}

const { id, type, title, content, media, category } = Astro.props;
---

<div id="edit-form" class="hidden">
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-white">编辑{type === 'question' ? '问题' : '帖子'}</h2>
                <button id="close-edit" class="text-gray-400 hover:text-white text-2xl"> × </button>
            </div>

            <form id="post-edit-form" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2"> 标题 </label>
                    <input
                        type="text"
                        id="edit-title"
                        value={title}
                        class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                        placeholder="请输入标题"
                        maxlength="200"
                    />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2"> 分类 </label>
                    <select
                        id="edit-category"
                        class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded text-white focus:outline-none focus:border-blue-500"
                    >
                        <option value="">选择分类</option>
                        <option value="tech" selected={category === 'tech'}>技术</option>
                        <option value="life" selected={category === 'life'}>生活</option>
                        <option value="news" selected={category === 'news'}>新闻</option>
                        <option value="other" selected={category === 'other'}>其他</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2"> 内容 </label>
                    <textarea
                        id="edit-content"
                        rows="10"
                        class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 resize-vertical"
                        placeholder="请输入内容">{content}</textarea
                    >
                    <div class="flex justify-between text-xs text-gray-400 mt-1">
                        <span>支持 Markdown 格式</span>
                        <span id="content-length">{content.length}/10000</span>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2"> 媒体文件 </label>
                    <div id="edit-media-list" class="space-y-2">
                        {
                            media && media.length > 0 ? (
                                media.map((item, index) => (
                                    <div class="flex items-center gap-2 p-2 bg-white/5 rounded">
                                        <span class="text-sm text-gray-300 flex-1 truncate">{item.name || item.url}</span>
                                        <button
                                            type="button"
                                            class="px-2 py-1 bg-red-600 hover:bg-red-700 rounded text-xs transition-colors"
                                            onclick={`removeMedia(${index})`}
                                        >
                                            删除
                                        </button>
                                    </div>
                                ))
                            ) : (
                                <p class="text-sm text-gray-400">暂无媒体文件</p>
                            )
                        }
                    </div>
                    <div class="mt-2">
                        <input type="file" id="edit-media-upload" multiple accept="image/*,video/*,.pdf,.doc,.docx,.txt" class="hidden" />
                        <button
                            type="button"
                            onclick="document.getElementById('edit-media-upload').click()"
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded text-sm transition-colors"
                        >
                            添加媒体文件
                        </button>
                    </div>
                </div>

                <div class="flex gap-3 pt-4 border-t border-white/10">
                    <button type="submit" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 rounded text-white transition-colors"> 保存 </button>
                    <button type="button" id="cancel-edit" class="px-6 py-2 bg-white/10 hover:bg-white/20 rounded text-white transition-colors"> 取消 </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // 编辑表单交互逻辑
    document.addEventListener('DOMContentLoaded', () => {
        const editForm = document.getElementById('edit-form');
        const closeEdit = document.getElementById('close-edit');
        const cancelEdit = document.getElementById('cancel-edit');
        const postEditForm = document.getElementById('post-edit-form');
        const editTitle = document.getElementById('edit-title') as HTMLInputElement;
        const editContent = document.getElementById('edit-content') as HTMLTextAreaElement;
        const contentLength = document.getElementById('content-length');
        const mediaUpload = document.getElementById('edit-media-upload') as HTMLInputElement;

        // 显示编辑表单
        function showEditForm() {
            editForm?.classList.remove('hidden');
        }

        // 隐藏编辑表单
        function hideEditForm() {
            editForm?.classList.add('hidden');
        }

        // 关闭编辑表单
        closeEdit?.addEventListener('click', hideEditForm);
        cancelEdit?.addEventListener('click', hideEditForm);

        // 点击背景关闭
        editForm?.addEventListener('click', (e) => {
            if (e.target === editForm) {
                hideEditForm();
            }
        });

        // 内容长度统计
        editContent?.addEventListener('input', () => {
            if (contentLength) {
                contentLength.textContent = `${editContent.value.length}/10000`;
            }
        });

        // 媒体文件上传
        mediaUpload?.addEventListener('change', (e) => {
            const files = (e.target as HTMLInputElement).files;
            if (files) {
                // 这里应该实现文件上传逻辑
                console.log('Selected files:', files);
            }
        });

        // 表单提交
        postEditForm?.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = {
                title: editTitle?.value || '',
                content: editContent?.value || '',
                category: (document.getElementById('edit-category') as HTMLSelectElement)?.value || ''
            };

            // 触发自定义事件
            const event = new CustomEvent('postUpdate', {
                detail: { postId: '{id}', data: formData }
            });
            document.dispatchEvent(event);

            hideEditForm();
        });

        // 暴露给全局使用
        (window as any).showEditForm = showEditForm;
        (window as any).hideEditForm = hideEditForm;
    });

    // 删除媒体文件
    function removeMedia(index: number) {
        const mediaList = document.getElementById('edit-media-list');
        const mediaItems = mediaList?.querySelectorAll('.flex');
        if (mediaItems && mediaItems[index]) {
            mediaItems[index].remove();
        }
    }
</script>
