---
interface Props {
    media: Array<{
        url: string;
        type?: string;
        name?: string;
        size?: number;
    }>;
}

const { media } = Astro.props;
---

{media && media.length > 0 && (
    <div class="media-gallery">
        <h3 class="text-lg font-semibold mb-4 text-white">附件 ({media.length})</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {media.map((item, index) => (
                <div class="media-item bg-white/5 rounded-lg overflow-hidden hover:bg-white/10 transition-colors">
                    {item.type?.startsWith('image') ? (
                        <div class="relative group">
                            <img 
                                src={item.url} 
                                alt={item.name || `图片 ${index + 1}`}
                                class="w-full h-48 object-cover cursor-pointer"
                                data-index={index}
                            />
                            <div class="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                                <button class="px-3 py-1 bg-white/20 hover:bg-white/30 rounded text-sm transition-colors">
                                    查看
                                </button>
                            </div>
                        </div>
                    ) : item.type?.startsWith('video') ? (
                        <div class="relative">
                            <video 
                                src={item.url} 
                                controls 
                                class="w-full h-48 object-cover"
                                preload="metadata"
                            />
                            <div class="p-3">
                                <p class="text-sm text-gray-300 truncate">{item.name || `视频 ${index + 1}`}</p>
                            </div>
                        </div>
                    ) : (
                        <div class="p-4 text-center">
                            <div class="w-16 h-16 mx-auto mb-3 bg-white/10 rounded-full flex items-center justify-center">
                                <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm0 2h12v8H4V6z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                            <p class="text-sm text-gray-300 mb-2 truncate">{item.name || `文件 ${index + 1}`}</p>
                            {item.size && (
                                <p class="text-xs text-gray-500 mb-3">
                                    {(item.size / 1024 / 1024).toFixed(1)} MB
                                </p>
                            )}
                            <div class="flex gap-2 justify-center">
                                <button 
                                    class="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-xs transition-colors"
                                    onclick={`window.open('${item.url}', '_blank')`}
                                >
                                    下载
                                </button>
                                <button 
                                    class="px-3 py-1 bg-white/10 hover:bg-white/20 rounded text-xs transition-colors"
                                    onclick={`navigator.clipboard.writeText('${item.url}')`}
                                >
                                    复制链接
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            ))}
        </div>
    </div>
)}

<script>
    // 媒体画廊交互逻辑
    document.addEventListener('DOMContentLoaded', () => {
        // 图片预览功能
        const images = document.querySelectorAll('.media-item img');
        images.forEach(img => {
            img.addEventListener('click', () => {
                const imgElement = img as HTMLImageElement;
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-black/90 flex items-center justify-center z-50';
                modal.innerHTML = `
                    <div class="relative max-w-4xl max-h-full p-4">
                        <button class="absolute top-4 right-4 text-white text-2xl hover:text-gray-300" onclick="this.parentElement.parentElement.remove()">
                            ×
                        </button>
                        <img src="${imgElement.src}" class="max-w-full max-h-full object-contain" />
                    </div>
                `;
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        modal.remove();
                    }
                });
                document.body.appendChild(modal);
            });
        });

        // 视频预览功能
        const videos = document.querySelectorAll('.media-item video');
        videos.forEach(video => {
            video.addEventListener('click', () => {
                const videoElement = video as HTMLVideoElement;
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-black/90 flex items-center justify-center z-50';
                modal.innerHTML = `
                    <div class="relative max-w-4xl max-h-full p-4">
                        <button class="absolute top-4 right-4 text-white text-2xl hover:text-gray-300" onclick="this.parentElement.parentElement.remove()">
                            ×
                        </button>
                        <video src="${videoElement.src}" controls class="max-w-full max-h-full" autoplay>
                            您的浏览器不支持视频播放
                        </video>
                    </div>
                `;
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        modal.remove();
                    }
                });
                document.body.appendChild(modal);
            });
        });
    });
</script>
