---
import Layout from '../layouts/Layout.astro';
import FeedbackForm from '../components/FeedbackForm.astro';
import FeedbackHistory from '../components/FeedbackHistory.astro';

// 页面元数据
const title = '用户反馈';
const description = '提交反馈和建议，帮助我们改进产品';
---

<Layout title={title} description={description}>
    <div class="min-h-screen bg-gray-900">
        <!-- 页面头部 -->
        <div class="bg-gray-800 border-b border-gray-700">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between h-16">
                    <div class="flex items-center">
                        <h1 class="text-xl font-semibold text-white">用户反馈</h1>
                        <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"> 重要 </span>
                    </div>
                    <div class="flex items-center gap-4">
                        <button id="refresh-btn" class="p-2 text-gray-400 hover:text-white transition-colors" title="刷新">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path
                                    fill-rule="evenodd"
                                    d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z"
                                    clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- 主要内容 -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- 标签页导航 -->
            <div class="border-b border-gray-700 mb-8">
                <nav class="-mb-px flex space-x-8">
                    <button id="tab-form" class="tab-btn border-b-2 border-blue-500 text-blue-400 py-2 px-1 text-sm font-medium" data-tab="form">
                        提交反馈
                    </button>
                    <button
                        id="tab-history"
                        class="tab-btn border-b-2 border-transparent text-gray-400 hover:text-gray-300 py-2 px-1 text-sm font-medium"
                        data-tab="history"
                    >
                        反馈历史
                    </button>
                </nav>
            </div>

            <!-- 标签页内容 -->
            <div id="tab-content">
                <!-- 提交反馈标签页 -->
                <div id="tab-form-content" class="tab-panel">
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        <!-- 反馈表单 -->
                        <div class="lg:col-span-2">
                            <FeedbackForm onSubmit={(data) => {}} onCancel={() => {}} />
                        </div>

                        <!-- 反馈指南 -->
                        <div class="space-y-6">
                            <!-- 反馈指南 -->
                            <div class="bg-gray-800 rounded-lg p-6">
                                <h3 class="text-lg font-medium text-white mb-4">反馈指南</h3>
                                <div class="space-y-4 text-sm text-gray-300">
                                    <div class="flex items-start gap-3">
                                        <div
                                            class="flex-shrink-0 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-medium"
                                        >
                                            1
                                        </div>
                                        <div>
                                            <p class="font-medium text-white mb-1">选择正确的反馈类型</p>
                                            <p class="text-gray-400">根据您的反馈内容选择最合适的类型，这样我们能更快地处理您的反馈。</p>
                                        </div>
                                    </div>
                                    <div class="flex items-start gap-3">
                                        <div
                                            class="flex-shrink-0 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-medium"
                                        >
                                            2
                                        </div>
                                        <div>
                                            <p class="font-medium text-white mb-1">提供详细描述</p>
                                            <p class="text-gray-400">尽可能详细地描述您遇到的问题或建议，包括具体的操作步骤和期望结果。</p>
                                        </div>
                                    </div>
                                    <div class="flex items-start gap-3">
                                        <div
                                            class="flex-shrink-0 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-medium"
                                        >
                                            3
                                        </div>
                                        <div>
                                            <p class="font-medium text-white mb-1">上传相关附件</p>
                                            <p class="text-gray-400">如果是Bug报告，可以上传截图或录屏；如果是功能建议，可以上传设计稿或参考案例。</p>
                                        </div>
                                    </div>
                                    <div class="flex items-start gap-3">
                                        <div
                                            class="flex-shrink-0 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-medium"
                                        >
                                            4
                                        </div>
                                        <div>
                                            <p class="font-medium text-white mb-1">留下联系方式</p>
                                            <p class="text-gray-400">如果您希望我们回复您的反馈，请留下邮箱或其他联系方式。</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 反馈类型说明 -->
                            <div class="bg-gray-800 rounded-lg p-6">
                                <h3 class="text-lg font-medium text-white mb-4">反馈类型说明</h3>
                                <div class="space-y-3 text-sm">
                                    <div class="flex items-center gap-2">
                                        <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                                        <span class="text-white">Bug 报告：</span>
                                        <span class="text-gray-400">系统错误、功能异常等问题</span>
                                    </div>
                                    <div class="flex items-center gap-2">
                                        <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                        <span class="text-white">功能建议：</span>
                                        <span class="text-gray-400">新功能需求、功能扩展等</span>
                                    </div>
                                    <div class="flex items-center gap-2">
                                        <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                                        <span class="text-white">改进建议：</span>
                                        <span class="text-gray-400">现有功能的优化建议</span>
                                    </div>
                                    <div class="flex items-center gap-2">
                                        <div class="w-3 h-3 bg-gray-500 rounded-full"></div>
                                        <span class="text-white">其他：</span>
                                        <span class="text-gray-400">其他类型的反馈</span>
                                    </div>
                                </div>
                            </div>

                            <!-- 常见问题 -->
                            <div class="bg-gray-800 rounded-lg p-6">
                                <h3 class="text-lg font-medium text-white mb-4">常见问题</h3>
                                <div class="space-y-3 text-sm">
                                    <details class="group">
                                        <summary class="cursor-pointer text-white hover:text-blue-400 transition-colors"> 反馈提交后多久会收到回复？ </summary>
                                        <p class="text-gray-400 mt-2 pl-4">我们会在1-3个工作日内回复您的反馈。如果是紧急的Bug报告，我们会优先处理。</p>
                                    </details>
                                    <details class="group">
                                        <summary class="cursor-pointer text-white hover:text-blue-400 transition-colors"> 可以上传哪些类型的附件？ </summary>
                                        <p class="text-gray-400 mt-2 pl-4">
                                            支持图片（JPG、PNG、GIF）、文档（PDF、DOC、DOCX）、文本文件（TXT）等格式，单个文件最大10MB。
                                        </p>
                                    </details>
                                    <details class="group">
                                        <summary class="cursor-pointer text-white hover:text-blue-400 transition-colors"> 如何查看反馈处理进度？ </summary>
                                        <p class="text-gray-400 mt-2 pl-4">您可以在"反馈历史"页面查看所有反馈的处理状态和进度更新。</p>
                                    </details>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 反馈历史标签页 -->
                <div id="tab-history-content" class="tab-panel hidden">
                    <FeedbackHistory
                        feedbacks={[]}
                        currentPage={1}
                        totalPages={1}
                        onViewDetail={(id) => {}}
                        onPageChange={(page) => {}}
                        onFilter={(status) => {}}
                        onSearch={(query) => {}}
                    />
                </div>
            </div>
        </div>
    </div>

    <!-- 成功提示模态框 -->
    <div id="success-modal" class="fixed inset-0 bg-black/50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg max-w-md w-full p-6 text-center">
                <div class="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path
                            fill-rule="evenodd"
                            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                            clip-rule="evenodd"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-white mb-2">反馈提交成功！</h3>
                <p class="text-gray-400 mb-6">感谢您的反馈，我们会认真处理您的建议。您可以在反馈历史中查看处理进度。</p>
                <div class="flex items-center justify-center gap-3">
                    <button type="button" class="px-4 py-2 text-gray-400 hover:text-white transition-colors" onclick="closeSuccessModal()"> 继续提交 </button>
                    <button type="button" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors" onclick="viewHistory()">
                        查看历史
                    </button>
                </div>
            </div>
        </div>
    </div>
</Layout>

<script>
    import { createClient } from '@supabase/supabase-js';

    // 初始化Supabase客户端
    const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
    const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // 全局状态
    let currentUser = null;
    let feedbacks = [];
    let currentPage = 1;
    let totalPages = 1;
    let currentFilter = '';
    let currentSearch = '';

    // 页面加载完成后初始化
    document.addEventListener('DOMContentLoaded', async () => {
        await initializePage();
        bindEvents();
        loadFeedbacks();
    });

    // 初始化页面
    async function initializePage() {
        try {
            // 获取当前用户
            const {
                data: { user },
                error
            } = await supabase.auth.getUser();
            if (error) {
                console.error('获取用户信息失败:', error);
                return;
            }
            currentUser = user;

            if (!currentUser) {
                window.location.href = '/login';
                return;
            }
        } catch (error) {
            console.error('初始化失败:', error);
        }
    }

    // 绑定事件
    function bindEvents() {
        // 标签页切换
        const tabBtns = document.querySelectorAll('.tab-btn');
        tabBtns.forEach((btn) => {
            btn.addEventListener('click', () => {
                const tab = btn.dataset.tab;
                switchTab(tab);
            });
        });

        // 刷新按钮
        document.getElementById('refresh-btn')?.addEventListener('click', () => {
            loadFeedbacks();
        });

        // 反馈相关事件
        document.addEventListener('feedbackSubmit', handleFeedbackSubmit);
        document.addEventListener('feedbackCancel', handleFeedbackCancel);
        document.addEventListener('feedbackViewDetail', handleFeedbackViewDetail);
        document.addEventListener('feedbackPageChange', handleFeedbackPageChange);
        document.addEventListener('feedbackFilter', handleFeedbackFilter);
        document.addEventListener('feedbackSearch', handleFeedbackSearch);
        document.addEventListener('feedbackExport', handleFeedbackExport);
    }

    // 切换标签页
    function switchTab(tab) {
        // 更新按钮状态
        document.querySelectorAll('.tab-btn').forEach((btn) => {
            btn.classList.remove('border-blue-500', 'text-blue-400');
            btn.classList.add('border-transparent', 'text-gray-400');
        });

        const activeBtn = document.querySelector(`[data-tab="${tab}"]`);
        if (activeBtn) {
            activeBtn.classList.remove('border-transparent', 'text-gray-400');
            activeBtn.classList.add('border-blue-500', 'text-blue-400');
        }

        // 更新内容显示
        document.querySelectorAll('.tab-panel').forEach((panel) => {
            panel.classList.add('hidden');
        });

        const activePanel = document.getElementById(`tab-${tab}-content`);
        if (activePanel) {
            activePanel.classList.remove('hidden');
        }

        // 根据标签页加载数据
        if (tab === 'history') {
            loadFeedbacks();
        }
    }

    // 加载反馈列表
    async function loadFeedbacks() {
        try {
            const pageSize = 10;
            const offset = (currentPage - 1) * pageSize;

            let query = supabase
                .from('feedback')
                .select('*', { count: 'exact' })
                .eq('user_id', currentUser.id)
                .order('created_at', { ascending: false })
                .range(offset, offset + pageSize - 1);

            // 应用筛选
            if (currentFilter) {
                query = query.eq('status', currentFilter);
            }

            // 应用搜索
            if (currentSearch) {
                query = query.or(`title.ilike.%${currentSearch}%,content.ilike.%${currentSearch}%`);
            }

            const { data, error, count } = await query;

            if (error) {
                console.error('加载反馈失败:', error);
                return;
            }

            feedbacks = data || [];
            totalPages = Math.ceil((count || 0) / pageSize);

            // 更新UI
            updateFeedbackHistory();
        } catch (error) {
            console.error('加载反馈失败:', error);
        }
    }

    // 更新反馈历史UI
    function updateFeedbackHistory() {
        const container = document.getElementById('tab-history-content');
        if (!container) return;

        container.innerHTML = `
            <FeedbackHistory 
                feedbacks='${JSON.stringify(feedbacks)}'
                currentPage="${currentPage}"
                totalPages="${totalPages}"
                onViewDetail="viewFeedbackDetail"
                onPageChange="changeFeedbackPage"
                onFilter="filterFeedback"
                onSearch="searchFeedback"
            />
        `;
    }

    // 事件处理函数
    async function handleFeedbackSubmit(event) {
        const { formData } = event.detail;

        try {
            // 上传附件
            const attachmentUrls = [];
            const files = formData.getAll('attachments');

            for (const file of files) {
                if (file instanceof File) {
                    const fileName = `${Date.now()}_${file.name}`;
                    const { data, error } = await supabase.storage.from('feedback-attachments').upload(fileName, file);

                    if (error) {
                        console.error('文件上传失败:', error);
                        continue;
                    }

                    const { data: urlData } = supabase.storage.from('feedback-attachments').getPublicUrl(fileName);

                    attachmentUrls.push(urlData.publicUrl);
                }
            }

            // 提交反馈
            const { error } = await supabase.from('feedback').insert({
                user_id: currentUser.id,
                type: formData.get('type'),
                title: formData.get('title'),
                content: formData.get('content'),
                contact: formData.get('contact') || null,
                attachments: attachmentUrls.length > 0 ? attachmentUrls : null
            });

            if (error) {
                console.error('提交反馈失败:', error);
                alert('提交失败，请稍后重试');
                return;
            }

            // 显示成功提示
            showSuccessModal();

            // 重置表单
            resetForm();
        } catch (error) {
            console.error('提交反馈失败:', error);
            alert('提交失败，请稍后重试');
        }
    }

    function handleFeedbackCancel() {
        if (confirm('确定要取消提交反馈吗？未保存的内容将丢失。')) {
            resetForm();
        }
    }

    function handleFeedbackViewDetail(event) {
        const { id } = event.detail;
        // 实现查看反馈详情的逻辑
        console.log('查看反馈详情:', id);
    }

    function handleFeedbackPageChange(event) {
        const { page } = event.detail;
        currentPage = page;
        loadFeedbacks();
    }

    function handleFeedbackFilter(event) {
        const { status } = event.detail;
        currentFilter = status;
        currentPage = 1;
        loadFeedbacks();
    }

    function handleFeedbackSearch(event) {
        const { query } = event.detail;
        currentSearch = query;
        currentPage = 1;
        loadFeedbacks();
    }

    async function handleFeedbackExport() {
        try {
            const { data, error } = await supabase.from('feedback').select('*').eq('user_id', currentUser.id).order('created_at', { ascending: false });

            if (error) {
                console.error('导出反馈失败:', error);
                return;
            }

            // 创建CSV内容
            const csvContent = [
                ['类型', '标题', '内容', '状态', '创建时间'],
                ...data.map((f) => [f.type, f.title, f.content, f.status, new Date(f.created_at).toLocaleString('zh-CN')])
            ]
                .map((row) => row.map((cell) => `"${cell}"`).join(','))
                .join('\n');

            // 下载文件
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `feedback_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
        } catch (error) {
            console.error('导出反馈失败:', error);
        }
    }

    // 显示成功提示
    function showSuccessModal() {
        const modal = document.getElementById('success-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    // 关闭成功提示
    function closeSuccessModal() {
        const modal = document.getElementById('success-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    // 查看历史
    function viewHistory() {
        closeSuccessModal();
        switchTab('history');
    }

    // 重置表单
    function resetForm() {
        const form = document.getElementById('feedback-form') as HTMLFormElement;
        if (form) {
            form.reset();
        }

        // 重置文件列表
        const attachmentsList = document.getElementById('attachments-list');
        if (attachmentsList) {
            attachmentsList.classList.add('hidden');
            attachmentsList.innerHTML = '';
        }

        // 重置字符计数
        const titleCount = document.getElementById('title-count');
        const contentCount = document.getElementById('content-count');
        if (titleCount) titleCount.textContent = '0/200';
        if (contentCount) contentCount.textContent = '0/2000';
    }

    // 全局函数
    (window as any).closeSuccessModal = closeSuccessModal;
    (window as any).viewHistory = viewHistory;
</script>
